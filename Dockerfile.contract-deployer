# Use Node.js slim image as the base image
FROM node:20-slim as builder

# Install necessary packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    make \
    gcc \
    g++ \
    git \
    openssl \
    bash \
    jq \
    curl \
    python3 \
    python3-pip \
    python3-venv \
    ca-certificates \
    wget \
    && rm -rf /var/lib/apt/lists/*

# Install Go 1.21.0
RUN curl -OL https://go.dev/dl/go1.21.0.linux-arm64.tar.gz && \
    tar -C /usr/local -xzf go1.21.0.linux-arm64.tar.gz && \
    rm go1.21.0.linux-arm64.tar.gz

# Set Go environment variables
ENV PATH="/usr/local/go/bin:${PATH}"
ENV GOPATH="/root/go"
ENV CGO_ENABLED=1
ENV GOARCH=arm64
ENV CC=gcc
ENV GOOS=linux

# Verify Go installation
RUN go version

# Set SHELL environment variable
ENV SHELL=/bin/bash

# Install pnpm globally
RUN npm install -g pnpm
RUN pnpm --version

# Install Foundry
RUN curl -L https://foundry.paradigm.xyz | bash
ENV PATH="/root/.foundry/bin:${PATH}"

# Install Foundry components
RUN foundryup
RUN forge --version

# Set the working directory
WORKDIR /app

# Set up Python virtual environment
RUN python3 -m venv /app/venv
ENV PATH="/app/venv/bin:$PATH"

# Install Python dependencies in the virtual environment
RUN pip install --upgrade pip && pip install web3 eth_account

# Copy application source code and scripts
COPY unifi-mono/ /app/unifi-mono/
COPY unifi-geth/ /app/unifi-geth/
COPY jwt.txt /app/jwt.txt
COPY deploy_l1_contracts.sh /app/deploy_l1_contracts.sh
COPY approve_taiko_token.py /app/approve_taiko_token.py

# Make scripts executable
RUN chmod +x /app/deploy_l1_contracts.sh

# # Build protocol contracts
# WORKDIR /app/unifi-mono/packages/protocol
# RUN pnpm install
# RUN pnpm compile

# # Set the working directory
# WORKDIR /app

# Expose necessary ports
# EXPOSE 8545 8546 8551

# Set the command to run the deployer
CMD ["/bin/bash", "/app/deploy_l1_contracts.sh"]
